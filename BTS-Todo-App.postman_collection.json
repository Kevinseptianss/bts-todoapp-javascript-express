{
	"info": {
		"_postman_id": "95635f3f-769d-4513-bb98-cc5acc10eb17",
		"name": "BTS-Todo-App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.message).to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"kevin@gmail.com\",\n    \"password\": \"kevin123\",\n    \"username\": \"kevins\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/register",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.token).to.be.a('string');",
							"    ",
							"    pm.environment.set('token', responseJson.token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"kevin123\",\n    \"username\": \"kevins\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Testing 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/checklist",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an array', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/checklist",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete checklist by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 204 status code', () => {",
							"    pm.expect(pm.response).to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/checklist/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Testing 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/checklist",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new checklist item in checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"itemName\": \"Testing Item sub 2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/checklist/1/item",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new checklist item in checklist Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"itemName\": \"Testing Item sub\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/checklist/1/item",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Checklist Item by checklist id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an array', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/checklist/1/item",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get checklist item in checklist by checklist id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/checklist/1/item/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update status checklist item by checklist item id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "localhost:8080/checklist/1/item/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rename item by checlist item id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"itemName\":\"Item sub change to 3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/checklist/1/item/rename/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item",
						"rename",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item by checklist item id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 204 status code', () => {",
							"    pm.expect(pm.response).to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/checklist/1/item/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"checklist",
						"1",
						"item",
						"2"
					]
				}
			},
			"response": []
		}
	]
}